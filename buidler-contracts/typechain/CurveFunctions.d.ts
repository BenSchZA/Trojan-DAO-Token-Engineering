/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CurveFunctionsInterface extends Interface {
  functions: {};

  events: {};
}

export class CurveFunctions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CurveFunctions;
  attach(addressOrName: string): CurveFunctions;
  deployed(): Promise<CurveFunctions>;

  on(event: EventFilter | string, listener: Listener): CurveFunctions;
  once(event: EventFilter | string, listener: Listener): CurveFunctions;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CurveFunctions;
  removeAllListeners(eventName: EventFilter | string): CurveFunctions;
  removeListener(eventName: any, listener: Listener): CurveFunctions;

  interface: CurveFunctionsInterface;

  functions: {
    curveIntegral(_x: BigNumberish): Promise<BigNumber>;

    sqrt(_x: BigNumberish): Promise<BigNumber>;

    inverseCurveIntegral(_x: BigNumberish): Promise<BigNumber>;

    DECIMALS(): Promise<BigNumber>;
    curveFunction(): Promise<string>;
  };

  filters: {};

  estimate: {};
}
