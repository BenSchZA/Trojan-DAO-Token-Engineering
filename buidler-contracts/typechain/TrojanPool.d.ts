/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TrojanPoolInterface extends Interface {
  functions: {
    withdraw: TypedFunctionDescription<{
      encode([sharesToBurn]: [BigNumberish]): string;
    }>;

    addKeepers: TypedFunctionDescription<{
      encode([newKeepers]: [(string)[]]): string;
    }>;

    activate: TypedFunctionDescription<{
      encode([initialTokens, initialPoolShares]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    keeperWithdraw: TypedFunctionDescription<{
      encode([sharesToBurn, recipient]: [BigNumberish, string]): string;
    }>;

    sync: TypedFunctionDescription<{
      encode([toIndex]: [BigNumberish]): string;
    }>;

    deposit: TypedFunctionDescription<{
      encode([tokenAmount]: [BigNumberish]): string;
    }>;

    removeKeepers: TypedFunctionDescription<{
      encode([keepersToRemove]: [(string)[]]): string;
    }>;
  };

  events: {
    Sync: TypedEventDescription<{
      encodeTopics([currentProposalIndex]: [null]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([donor, sharesMinted, tokensDeposited]: [
        null,
        null,
        null
      ]): string[];
    }>;

    Withdraw: TypedEventDescription<{
      encodeTopics([donor, sharesBurned]: [null, null]): string[];
    }>;

    KeeperWithdraw: TypedEventDescription<{
      encodeTopics([donor, sharesBurned, keeper]: [null, null, null]): string[];
    }>;

    AddKeepers: TypedEventDescription<{
      encodeTopics([donor, addedKeepers]: [null, null]): string[];
    }>;

    RemoveKeepers: TypedEventDescription<{
      encodeTopics([donor, removedKeepers]: [null, null]): string[];
    }>;

    SharesMinted: TypedEventDescription<{
      encodeTopics([sharesToMint, recipient, totalPoolShares]: [
        null,
        null,
        null
      ]): string[];
    }>;

    SharesBurned: TypedEventDescription<{
      encodeTopics([sharesToBurn, recipient, totalPoolShares]: [
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class TrojanPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TrojanPool;
  attach(addressOrName: string): TrojanPool;
  deployed(): Promise<TrojanPool>;

  on(event: EventFilter | string, listener: Listener): TrojanPool;
  once(event: EventFilter | string, listener: Listener): TrojanPool;
  addListener(eventName: EventFilter | string, listener: Listener): TrojanPool;
  removeAllListeners(eventName: EventFilter | string): TrojanPool;
  removeListener(eventName: any, listener: Listener): TrojanPool;

  interface: TrojanPoolInterface;

  functions: {
    donors(arg0: string): Promise<BigNumber>;

    withdraw(
      sharesToBurn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addKeepers(
      newKeepers: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    activate(
      initialTokens: BigNumberish,
      initialPoolShares: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    keeperWithdraw(
      sharesToBurn: BigNumberish,
      recipient: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    sync(
      toIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deposit(
      tokenAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeKeepers(
      keepersToRemove: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentProposalIndex(): Promise<BigNumber>;
    trojan(): Promise<string>;
    totalPoolShares(): Promise<BigNumber>;
    approvedToken(): Promise<string>;
  };

  filters: {
    Sync(currentProposalIndex: null): EventFilter;

    Deposit(
      donor: null,
      sharesMinted: null,
      tokensDeposited: null
    ): EventFilter;

    Withdraw(donor: null, sharesBurned: null): EventFilter;

    KeeperWithdraw(donor: null, sharesBurned: null, keeper: null): EventFilter;

    AddKeepers(donor: null, addedKeepers: null): EventFilter;

    RemoveKeepers(donor: null, removedKeepers: null): EventFilter;

    SharesMinted(
      sharesToMint: null,
      recipient: null,
      totalPoolShares: null
    ): EventFilter;

    SharesBurned(
      sharesToBurn: null,
      recipient: null,
      totalPoolShares: null
    ): EventFilter;
  };

  estimate: {
    withdraw(sharesToBurn: BigNumberish): Promise<BigNumber>;

    addKeepers(newKeepers: (string)[]): Promise<BigNumber>;

    activate(
      initialTokens: BigNumberish,
      initialPoolShares: BigNumberish
    ): Promise<BigNumber>;

    keeperWithdraw(
      sharesToBurn: BigNumberish,
      recipient: string
    ): Promise<BigNumber>;

    sync(toIndex: BigNumberish): Promise<BigNumber>;

    deposit(tokenAmount: BigNumberish): Promise<BigNumber>;

    removeKeepers(keepersToRemove: (string)[]): Promise<BigNumber>;
  };
}
