/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TrojanTokenInterface extends Interface {
  functions: {
    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, value]: [string, string, BigNumberish]): string;
    }>;

    increaseAllowance: TypedFunctionDescription<{
      encode([spender, addedValue]: [string, BigNumberish]): string;
    }>;

    decreaseAllowance: TypedFunctionDescription<{
      encode([spender, subtractedValue]: [string, BigNumberish]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;

    setTrojanPool: TypedFunctionDescription<{
      encode([_trojanPool]: [string]): string;
    }>;

    mintSparkle: TypedFunctionDescription<{ encode([]: []): string }>;

    sellSparkle: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;
  };

  events: {
    SparkleRedistribution: TypedEventDescription<{
      encodeTopics([from, amount]: [null, null]): string[];
    }>;

    Mint: TypedEventDescription<{
      encodeTopics([to, amount]: [null, null]): string[];
    }>;

    Sell: TypedEventDescription<{
      encodeTopics([from, amount]: [null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class TrojanToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TrojanToken;
  attach(addressOrName: string): TrojanToken;
  deployed(): Promise<TrojanToken>;

  on(event: EventFilter | string, listener: Listener): TrojanToken;
  once(event: EventFilter | string, listener: Listener): TrojanToken;
  addListener(eventName: EventFilter | string, listener: Listener): TrojanToken;
  removeAllListeners(eventName: EventFilter | string): TrojanToken;
  removeListener(eventName: any, listener: Listener): TrojanToken;

  interface: TrojanTokenInterface;

  functions: {
    balanceOf(owner: string): Promise<BigNumber>;

    allowance(owner: string, spender: string): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTrojanPool(
      _trojanPool: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mintSparkle(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    sellSparkle(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(): Promise<string>;
    totalSupply(): Promise<BigNumber>;
    MINT_TAX(): Promise<BigNumber>;
    decimals(): Promise<number>;
    MAX_SUPPLY(): Promise<BigNumber>;
    tobinsCollected(): Promise<BigNumber>;
    BURN_TAX(): Promise<BigNumber>;
    COST_PER_TOKEN(): Promise<BigNumber>;
    symbol(): Promise<string>;
    PERCENT(): Promise<BigNumber>;
    TRANSFER_TAX(): Promise<BigNumber>;
  };

  filters: {
    SparkleRedistribution(from: null, amount: null): EventFilter;

    Mint(to: null, amount: null): EventFilter;

    Sell(from: null, amount: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;
  };

  estimate: {
    approve(spender: string, value: BigNumberish): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish): Promise<BigNumber>;

    setTrojanPool(_trojanPool: string): Promise<BigNumber>;

    mintSparkle(): Promise<BigNumber>;

    sellSparkle(amount: BigNumberish): Promise<BigNumber>;
  };
}
