/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TrojanDaoInterface extends Interface {
  functions: {
    updateDelegateKey: TypedFunctionDescription<{
      encode([newDelegateKey]: [string]): string;
    }>;

    ragequit: TypedFunctionDescription<{
      encode([sharesToBurn]: [BigNumberish]): string;
    }>;

    submitProposal: TypedFunctionDescription<{
      encode([applicant, tokenTribute, sharesRequested, details]: [
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    submitVote: TypedFunctionDescription<{
      encode([proposalIndex, uintVote]: [BigNumberish, BigNumberish]): string;
    }>;

    abort: TypedFunctionDescription<{
      encode([proposalIndex]: [BigNumberish]): string;
    }>;

    processProposal: TypedFunctionDescription<{
      encode([proposalIndex]: [BigNumberish]): string;
    }>;
  };

  events: {
    SubmitProposal: TypedEventDescription<{
      encodeTopics([
        proposalIndex,
        delegateKey,
        memberAddress,
        applicant,
        tokenTribute,
        sharesRequested
      ]: [
        null,
        string | null,
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    SubmitVote: TypedEventDescription<{
      encodeTopics([proposalIndex, delegateKey, memberAddress, uintVote]: [
        BigNumberish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    ProcessProposal: TypedEventDescription<{
      encodeTopics([
        proposalIndex,
        applicant,
        memberAddress,
        tokenTribute,
        sharesRequested,
        didPass
      ]: [
        BigNumberish | null,
        string | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    Ragequit: TypedEventDescription<{
      encodeTopics([memberAddress, sharesToBurn]: [
        string | null,
        null
      ]): string[];
    }>;

    Abort: TypedEventDescription<{
      encodeTopics([proposalIndex, applicantAddress]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    UpdateDelegateKey: TypedEventDescription<{
      encodeTopics([memberAddress, newDelegateKey]: [
        string | null,
        null
      ]): string[];
    }>;

    SummonComplete: TypedEventDescription<{
      encodeTopics([summoner, shares]: [string | null, null]): string[];
    }>;
  };
}

export class TrojanDao extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TrojanDao;
  attach(addressOrName: string): TrojanDao;
  deployed(): Promise<TrojanDao>;

  on(event: EventFilter | string, listener: Listener): TrojanDao;
  once(event: EventFilter | string, listener: Listener): TrojanDao;
  addListener(eventName: EventFilter | string, listener: Listener): TrojanDao;
  removeAllListeners(eventName: EventFilter | string): TrojanDao;
  removeListener(eventName: any, listener: Listener): TrojanDao;

  interface: TrojanDaoInterface;

  functions: {
    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish
    ): Promise<number>;

    members(
      arg0: string
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      0: string;
      1: BigNumber;
      2: boolean;
      3: BigNumber;
    }>;

    proposalQueue(
      arg0: BigNumberish
    ): Promise<{
      proposer: string;
      applicant: string;
      sharesRequested: BigNumber;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      processed: boolean;
      didPass: boolean;
      aborted: boolean;
      tokenTribute: BigNumber;
      details: string;
      maxTotalSharesAtYesVote: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: string;
      11: BigNumber;
    }>;

    memberAddressByDelegateKey(arg0: string): Promise<string>;

    hasVotingPeriodExpired(startingPeriod: BigNumberish): Promise<boolean>;

    canRagequit(highestIndexYesVote: BigNumberish): Promise<boolean>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    processingReward(): Promise<BigNumber>;
    getCurrentPeriod(): Promise<BigNumber>;
    totalSharesRequested(): Promise<BigNumber>;
    totalShares(): Promise<BigNumber>;
    gracePeriodLength(): Promise<BigNumber>;
    abortWindow(): Promise<BigNumber>;
    getProposalQueueLength(): Promise<BigNumber>;
    summoningTime(): Promise<BigNumber>;
    votingPeriodLength(): Promise<BigNumber>;
    proposalDeposit(): Promise<BigNumber>;
    guildBank(): Promise<string>;
    dilutionBound(): Promise<BigNumber>;
    periodDuration(): Promise<BigNumber>;
    approvedToken(): Promise<string>;
  };

  filters: {
    SubmitProposal(
      proposalIndex: null,
      delegateKey: string | null,
      memberAddress: string | null,
      applicant: string | null,
      tokenTribute: null,
      sharesRequested: null
    ): EventFilter;

    SubmitVote(
      proposalIndex: BigNumberish | null,
      delegateKey: string | null,
      memberAddress: string | null,
      uintVote: null
    ): EventFilter;

    ProcessProposal(
      proposalIndex: BigNumberish | null,
      applicant: string | null,
      memberAddress: string | null,
      tokenTribute: null,
      sharesRequested: null,
      didPass: null
    ): EventFilter;

    Ragequit(memberAddress: string | null, sharesToBurn: null): EventFilter;

    Abort(
      proposalIndex: BigNumberish | null,
      applicantAddress: null
    ): EventFilter;

    UpdateDelegateKey(
      memberAddress: string | null,
      newDelegateKey: null
    ): EventFilter;

    SummonComplete(summoner: string | null, shares: null): EventFilter;
  };

  estimate: {
    updateDelegateKey(newDelegateKey: string): Promise<BigNumber>;

    ragequit(sharesToBurn: BigNumberish): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string
    ): Promise<BigNumber>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish
    ): Promise<BigNumber>;

    abort(proposalIndex: BigNumberish): Promise<BigNumber>;

    processProposal(proposalIndex: BigNumberish): Promise<BigNumber>;
  };
}
